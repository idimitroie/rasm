#ifndef _DECODE_H
#define _DECODE_H

#include <stdlib.h>
#include <stdio.h>


#include "ast.h"

/**
 * @defgroup PrettyPrintModule Pretty Print Instructions
 * @brief Module for pretty printing RISC-V instructions.
 *
 * This module provides functionality to decode and pretty print RISC-V
 * instructions in a human-readable format. It includes functions to determine
 * the type of instruction, print the instruction details, and convert binary
 * representations into integer values. This is particularly useful for 
 * debugging and reviewing assembly code generated by the assembler.
 *
 * @{
 */

/**
 * @brief Enumeration of instruction types.
 *
 * This enumeration defines the different types of RISC-V instructions,
 * which include R-type, I-type, B-type, U-type, J-type, S-type, and
 * special I_SHAMT type.
 */
enum instr_type
{
    R_type,          /**< R-type instruction */
    I_type,          /**< I-type instruction */
    I_SHAMT_type,    /**< I-type instruction with shift amount */
    B_type,          /**< B-type instruction */
    U_type,          /**< U-type instruction */
    J_type,          /**< J-type instruction */
    S_type           /**< S-type instruction */
};
typedef enum instr_type instr_type_e;

/**
 * @brief Determines the type of a given instruction.
 *
 * This function decodes the provided instruction data and returns the
 * corresponding instruction type (e.g., R_type, I_type).
 *
 * @param data Pointer to the instruction data as an array of bytes.
 * @return instr_type_e The type of the instruction.
 */
extern instr_type_e get_instr_type(unsigned char *data);

/**
 * @brief Formats information from an `instr_t` structure into a dynamically allocated buffer.
 *
 * This function takes an `instr_t` structure, formats its content, and stores the formatted string
 * in a dynamically allocated buffer. The caller is responsible for freeing the allocated buffer
 * after use.
 *
 * @param[out] buffer Pointer to a char pointer that will be assigned the address of the 
 * dynamically allocated buffer containing the formatted string. The buffer is null-terminated.
 * @param[in] instr Pointer to the `instr_t` structure that contains the data to be formatted.
 *
 * @return int Returns 0 on success, or a negative value if an error occurs (e.g., memory allocation failure).
 *
 * Example Usage:
 * @code
 *     unsigned code = 0;
 *     instr_t instruction = {.data = (unsigned char*)&code };
 *     char *output_buffer = NULL;
 *     if (sprint_instr(&output_buffer, &instruction) == 0) {
 *         printf("%s", output_buffer);  // Print the formatted output
 *     }
 *     free(output_buffer);          // Free the buffer after use
 * @endcode
 */
extern int sprint_instr(char **buffer, instr_t *instr);

/**
 * @brief Prints a binary value with a specified number of bits.
 *
 * This function formats and prints the given binary value, ensuring it is
 * displayed with the specified number of bits (e.g., leading zeros).
 *
 * @param val The binary value to be printed.
 * @param bits The number of bits to display.
 */
extern void print_bin(unsigned int val, int bits);

/**
 * @brief Converts a section of binary data to an integer.
 *
 * This function extracts a specified range of bits from the provided binary
 * data and converts it to an unsigned integer.
 *
 * @param data Pointer to the binary data as an array of bytes.
 * @param from The starting bit position (inclusive) for extraction.
 * @param to The ending bit position (exclusive) for extraction.
 * @return unsigned int The integer representation of the extracted bits.
 */
extern unsigned int bin_to_int(unsigned char *data, int from, int to);

/** @} */ /* End of PrettyPrintModule */

#endif /* _DECODE_H */
